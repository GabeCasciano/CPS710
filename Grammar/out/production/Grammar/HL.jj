options {
  IGNORE_CASE=false;
  DEBUG_LOOKAHEAD = true;
  DEBUG_PARSER = true;
}

PARSER_BEGIN(HL)

public class HL {
}

PARSER_END(HL)

TOKEN_MGR_DECLS : 
{
    public static int commentdepth = 0;
}

SKIP : 
{
  " "     
  | "\t"    
  | "\n"    
  | "\r" 
}

TOKEN : 
{
  < AND:  "&">
|	< ASSIGN:	"=">
|	< COMMA:	",">
|	< DIV:	"/">
|	< EQUAL:	"==">
|	< GREATEQ:	">=">
|	< GREATER:	">">
| < ISIN:   "=in">
|	< LESSEQ:	"<=">
|	< LESS:	"<">
|	< LCURLY:	"{">
|	< LPAREN:	"(">
| < MOD: "%">
|	< MINUS:	"-">
| < NOTCOMP: "<>">
|	< NOTEQ:	"!=">
| < NOTIN: "!in">
|	< NOT:"!">
|	< OR:"|">
| < PLUS:	"+">
|	< PROD:	"*">
|	< RCURLY:	"}">
|	< RPAREN:	")">
|	< SEMICOL:	";">
}
TOKEN :
{
	< DO:"DO">
|	< ELIF:"ELIF">
|	< ELSE:"ELSE">
|	< END:"END">
| < FALSE:"FALSE">
|	< FI:"FI">
|	< FOR:"FOR">
| < FROM:"FROM">
|	< FUNCTION:"FUNCTION">
|	< IF:"IF">
| < IN:"IN">
| < ISA:"ISA">
| < NULL:"NULL">
|	< NUM:"NUM">
| < OBJ:"OBJ">
|	< OD:"OD">
| < PREDICATE:"PREDICATE">
|	< PRINT:"PRINT">
|	< PRINTLN:"PRINTLN">
|	< RETURN:"RETURN">
| < SET: "SET">
| < SUB: "SUB">
|	< STR:"STR">
|	< THEN:"THEN">
| < TO:"TO">
| < TRUE:"TRUE">
|	< WHILE:"WHILE">
}

TOKEN :
{
	< #DIGIT:	["0"-"9"]>
|	< #LETTER:	["a"-"z","A"-"Z"]>
|	< NUMBER:	(<DIGIT>)+ >
|	< IDENTIFIER:	<LETTER>(<LETTER>|<DIGIT>)* >
}

// ---------------------- PROCESSING STRING TOKEN ----------------------------

MORE:
{   <"\"" >    : INSTRING
}
<INSTRING> MORE:
{   < "\\\\" >
|   < "\\\"" >
|   < "\\t" >
|   < "\\n" >
}
<INSTRING> TOKEN:
{   <STRING: "\""> : DEFAULT
}
<INSTRING> MORE:
{
    < ["0"-"9"] >
|   < ["a"-"z","A"-"Z"] >
|   < ["`", "~", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "=", "+"] >
|   < ["[", "{", "]", "}", "|"] >
|   < [";", ":", "'"] >
|   < ["," , "<" , "." , ">" , "/" , "?", " "] >
}

// ---------------------- PROCESSING COMMENTS     ----------------------------

SPECIAL_TOKEN : {
        <COMMENT_SINGLE: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
    }

MORE:
{   < "/*" >    : INCOMMENT0
}

<INCOMMENT0> SPECIAL_TOKEN:
{
    < COMMENT_MULTI: "*/" > :   DEFAULT
}

<INCOMMENT0> MORE:
{
    < "/*" > {commentdepth++;}  : INCOMMENT1
|   < ~[] >
}

<INCOMMENT1> MORE:
{
    < "/*" > {commentdepth++;}
|   < "*/" > {commentdepth--; if (commentdepth==0) SwitchTo(INCOMMENT0); }
|   <~[]>
}


 // ===========================================================================
//                                 P A R S E R   
// ===========================================================================

void start	() :
{}
{	statement() /*| expression()*/
| < EOF > {throw new ParseException("End of File.");}
}

void statement () : // LL(1)
{}
{
   (declaration()
/*|   assignment()
|   if_stat()
|   for_stat()
|   while_stat()
|   fn_call()
|   print_stat()
|   return_stat() */)+ ";"
}

void body () : // LL(1)
{}
{
    (statement())*
}

void clause () : // LL(1)
{}
{
    (statement())+
}

void declaration() : // LL(1)
{}
{
    (type() decleration_prime())
|   sub_decleration()
|   predicate_decleration()
}

void decleration_prime(): //left factoring to reduce lookahead, LL(1)
{}
{
   fn_decleration() | simple_decleration()
}

void simple_decleration() : // LL(1)
{}
{
    identifier_list()
}

void fn_decleration(): // right factored
{}
{
    <FUNCTION> decleration_suffix()
}

void sub_decleration(): // right factored
{}
{
    <SUB> decleration_suffix()
}

void predicate_decleration(): // right factored
{}
{
    <PREDICATE> decleration_suffix()
}



void decleration_suffix():
{}
{
    <IDENTIFIER> "("  param_declerations() ")" body() <END>
}

void type():
{}
{
    <NUM>
|   <STR>
|   <SET>
|   <OBJ>
}

void param_declerations():
{}
{
    type() <IDENTIFIER> identifier_list()
}

void identifier_list(): // replaced param_decel modified param_decels^^
{}
{
    <IDENTIFIER> ("," <IDENTIFIER> )*
}