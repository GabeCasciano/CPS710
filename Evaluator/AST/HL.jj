/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. HL.jj */
/*@egen*/// HL.jjt Copyright Sophie Quigley 2020
// This file can be only used during the Fall 2020 academic semester 
// in assignments for the course CPS710 at Ryerson University.
// Other uses and distributions are prohibited.  
// In particular this file or any others derived from it 
// may not be posted in any source code repositories.

options {
  IGNORE_CASE=true;
  DEBUG_PARSER=false;
             	                                                                        
                                                                                            
                                                                                                          
               
                                	
}

PARSER_BEGIN(HL)

public class HL/*@bgen(jjtree)*/implements HLTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTHLState jjtree = new JJTHLState();

/*@egen*/
}

PARSER_END(HL)

// ===========================================================================
//                                 S C A N N E R   
// ===========================================================================

TOKEN_MGR_DECLS : 
{
public static int commentdepth = 0;
}

SKIP : {
  " "     
  | "\t"    
  | "\n"    
  | "\r"    
  }

TOKEN : 
{
  < AND:  "&">
|	< ASSIGN:	"=">
|	< COMMA:	",">
|	< DIV:	"/">
|	< EQUAL:	"==">
|	< GREATEQ:	">=">
|	< GREATER:	">">
| < ISIN:   "=in">
|	< LESSEQ:	"<=">
|	< LESS:	"<">
|	< LCURLY:	"{">
|	< LPAREN:	"(">
| < MOD: "%">
|	< MINUS:	"-">
| < NOTCOMP: "<>">
|	< NOTEQ:	"!=">
| < NOTIN: "!in">
|	< NOT:"!">
|	< OR:"|">
| < PLUS:	"+">
|	< PROD:	"*">
|	< RCURLY:	"}">
|	< RPAREN:	")">
|	< SEMICOL:	";">
}
TOKEN : 
{
	< DO:"DO">
|	< ELIF:"ELIF">
|	< ELSE:"ELSE">
|	< END:"END">
| < FALSE:"FALSE">
|	< FI:"FI">
|	< FOR:"FOR">
| < FROM:"FROM">
|	< FUNCTION:"FUNCTION">
|	< IF:"IF">
| < IN:"IN">
| < ISA:"ISA">
| < NULL:"NULL">
|	< NUM:"NUM">
| < OBJ:"OBJ">
|	< OD:"OD">
| < PREDICATE:"PREDICATE">
|	< PRINT:"PRINT">
|	< PRINTLN:"PRINTLN">
|	< RETURN:"RETURN">
| < SET: "SET">
| < SUB: "SUB">
|	< STR:"STR">
|	< THEN:"THEN">
| < TO:"TO">
| < TRUE:"TRUE">
|	< WHILE:"WHILE">
}

TOKEN : 
{
	< #DIGIT:	["0"-"9"]>
|	< #LETTER:	["a"-"z","A"-"Z"]>
|	< NUMBER:	(<DIGIT>)+ >
|	< IDENTIFIER:	<LETTER>(<LETTER>|<DIGIT>)* >
}

// ---------------------- PROCESSING STRING TOKEN ----------------------------

MORE:
{   <"\"" >    : INSTRING
}
<INSTRING> MORE:
{   < "\\\\" >
|   < "\\\"" >
|   < "\\t" >
|   < "\\n" >
}
<INSTRING> TOKEN:
{   <STRING: "\""> : DEFAULT
}
<INSTRING> MORE:
{
    < ["0"-"9"] >
|   < ["a"-"z","A"-"Z"] >
|   < ["`", "~", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "=", "+"] >
|   < ["[", "{", "]", "}", "|"] >
|   < [";", ":", "'"] >
|   < ["," , "<" , "." , ">" , "/" , "?", " "] >
}

// ---------------------- PROCESSING COMMENTS     ----------------------------

SPECIAL_TOKEN : {
        <COMMENT_SINGLE: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
    }

MORE:
{   < "/*" >    : INCOMMENT0
}

<INCOMMENT0> SPECIAL_TOKEN:
{
    < COMMENT_MULTI: "*/" > :   DEFAULT
}

<INCOMMENT0> MORE:
{
    < "/*" > {commentdepth++;}  : INCOMMENT1
|   < ~[] >
}

<INCOMMENT1> MORE:
{
    < "/*" > {commentdepth++;}
|   < "*/" > {commentdepth--; if (commentdepth==0) SwitchTo(INCOMMENT0); }
|   <~[]>
}

// ===========================================================================
//                                 P A R S E R   
// ===========================================================================

// ------------------------------- BEGINNING -----------------------------------

SimpleNode start	()        :
{}
{  S()  { return (SimpleNode) (jjtree.popNode()); }
| < EOF > {throw new ParseException("End of File.");}
}

void S()       :
{}
{	statement_ll() ";"
| LOOKAHEAD(2) assignment() ";"
| expression() ";"
}

// ------------------------------- STATEMENTS -----------------------------------
void statement()       :
{}
{	statement_ll() ";" 
| LOOKAHEAD(2) assignment() ";"
| fn_call() ";"
}

void statement_ll()	      :
{}
{	declaration() 
| if_stat() 
| for_stat() 
| while_stat()	
| print_stat() 
| println_stat()
| return_stat()
}

void body()		 :
{/*@bgen(jjtree) body */
  ASTbody jjtn000 = new ASTbody(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) body */
        try {
/*@egen*/	(statement())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void clause()		 :
{/*@bgen(jjtree) clause */
  ASTclause jjtn000 = new ASTclause(JJTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) clause */
        try {
/*@egen*/	(statement())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// ------------------------------- DECLARATIONS ------------------------------

void declaration()       :
{}
{	LOOKAHEAD(2) simple_decl() 
| fn_decl() 
| sub_decl() 
| predicate_decl()
}

void simple_decl()	 :
{/*@bgen(jjtree) simple_decl */
  ASTsimple_decl jjtn000 = new ASTsimple_decl(JJTSIMPLE_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) simple_decl */
        try {
/*@egen*/	type() ident_list()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ident_list()	 :
{/*@bgen(jjtree) ident_list */
  ASTident_list jjtn000 = new ASTident_list(JJTIDENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ident_list */
        try {
/*@egen*/	identifier() ("," identifier())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void fn_decl()		 :
{/*@bgen(jjtree) fn_decl */
  ASTfn_decl jjtn000 = new ASTfn_decl(JJTFN_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fn_decl */
        try {
/*@egen*/	type() <FUNCTION> identifier() "(" param_decls() ")" body() <END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void sub_decl()	 :
{/*@bgen(jjtree) sub_decl */
  ASTsub_decl jjtn000 = new ASTsub_decl(JJTSUB_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) sub_decl */
        try {
/*@egen*/	<SUB> identifier()  "(" param_decls() ")" body() <END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void predicate_decl()	 :
{/*@bgen(jjtree) predicate_decl */
  ASTpredicate_decl jjtn000 = new ASTpredicate_decl(JJTPREDICATE_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) predicate_decl */
        try {
/*@egen*/	<PREDICATE>  identifier()  "(" param_decls() ")" body() <END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void type()       :
{}
{/*@bgen(jjtree) NUMTYPE */
        {
          ASTNUMTYPE jjtn001 = new ASTNUMTYPE(JJTNUMTYPE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	<NUM>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/           
|/*@bgen(jjtree) STRTYPE */
  {
    ASTSTRTYPE jjtn002 = new ASTSTRTYPE(JJTSTRTYPE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ <STR>/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/           
|/*@bgen(jjtree) SETTYPE */
  {
    ASTSETTYPE jjtn003 = new ASTSETTYPE(JJTSETTYPE);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ <SET>/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/           
|/*@bgen(jjtree) OBJTYPE */
  {
    ASTOBJTYPE jjtn004 = new ASTOBJTYPE(JJTOBJTYPE);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/ <OBJ>/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/          
}

void param_decls()	 :
{/*@bgen(jjtree) param_decls */
  ASTparam_decls jjtn000 = new ASTparam_decls(JJTPARAM_DECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) param_decls */
        try {
/*@egen*/	param_decl() ("," param_decl())*
|/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ {}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void param_decl()	 :
{/*@bgen(jjtree) param_decl */
  ASTparam_decl jjtn000 = new ASTparam_decl(JJTPARAM_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) param_decl */
        try {
/*@egen*/	type() identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// ------------------------------- ASSIGNMENT, IF, LOOPS ------------------------------

void assignment() :
{/*@bgen(jjtree) assignment */
  ASTassignment jjtn000 = new ASTassignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) assignment */
      try {
/*@egen*/     identifier() <ASSIGN> expression()/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void if_stat() :
{/*@bgen(jjtree) if_stat */
  ASTif_stat jjtn000 = new ASTif_stat(JJTIF_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) if_stat */
        try {
/*@egen*/	<IF> condition() <THEN> clause() else_clause() <FI>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void else_clause	()      :
{}
{/*@bgen(jjtree) if_stat */
         {
           ASTif_stat jjtn001 = new ASTif_stat(JJTIF_STAT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/	 (<ELIF> condition() <THEN> clause() else_clause())/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
         }
/*@egen*/         
|  <ELSE> clause()
|/*@bgen(jjtree) NOTHING */
   {
     ASTNOTHING jjtn002 = new ASTNOTHING(JJTNOTHING);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
   }
   try {
/*@egen*//*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn002, true);
     jjtc002 = false;
   }
/*@egen*/  {}/*@bgen(jjtree)*/
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
   }
/*@egen*/         
}

void for_stat()       :
{}
{	LOOKAHEAD(3) for_explicit() 
| for_implicit()
}

void for_explicit()	 :
{/*@bgen(jjtree) for_explicit */
  ASTfor_explicit jjtn000 = new ASTfor_explicit(JJTFOR_EXPLICIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) for_explicit */
        try {
/*@egen*/	<FOR> identifier() <FROM> expression() <TO> expression() <DO> body() <OD>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void for_implicit()	 :
{/*@bgen(jjtree) for_implicit */
  ASTfor_implicit jjtn000 = new ASTfor_implicit(JJTFOR_IMPLICIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) for_implicit */
        try {
/*@egen*/	<FOR> identifier() <IN> expression() <DO> body() <OD>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void while_stat()	 :
{/*@bgen(jjtree) while_stat */
  ASTwhile_stat jjtn000 = new ASTwhile_stat(JJTWHILE_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) while_stat */
        try {
/*@egen*/	<WHILE> condition() <DO> body() <OD>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// ------------------------------- FN CALLS, RETURN, PRINT -----------------------------

void fn_call()		 :
{/*@bgen(jjtree) fn_call */
  ASTfn_call jjtn000 = new ASTfn_call(JJTFN_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fn_call */
        try {
/*@egen*/	identifier() "(" optional_parameters() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void return_stat()	:
{/*@bgen(jjtree) return_stat */
  ASTreturn_stat jjtn000 = new ASTreturn_stat(JJTRETURN_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) return_stat */
        try {
/*@egen*/	<RETURN> optional_return_value()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void optional_return_value()       :
{}
{/*@bgen(jjtree) TRUE */
  {
    ASTTRUE jjtn001 = new ASTTRUE(JJTTRUE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ <TRUE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/              
|/*@bgen(jjtree) FALSE */
  {
    ASTFALSE jjtn002 = new ASTFALSE(JJTFALSE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ <FALSE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/              
| expression()
|/*@bgen(jjtree) NOTHING */
  {
    ASTNOTHING jjtn003 = new ASTNOTHING(JJTNOTHING);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn003, true);
    jjtc003 = false;
  }
/*@egen*/ {}/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/                     
}

void print_stat()      :
{}
{ <PRINT>/*@bgen(jjtree) print */
          {
            ASTprint jjtn001 = new ASTprint(JJTPRINT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ parameters()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/        
}

void println_stat()       :
{}
{ <PRINTLN>/*@bgen(jjtree) println */
            {
              ASTprintln jjtn001 = new ASTprintln(JJTPRINTLN);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ optional_parameters()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/         
}

void optional_parameters()        :
{}
{ parameters()
|/*@bgen(jjtree) parameters */
  {
    ASTparameters jjtn001 = new ASTparameters(JJTPARAMETERS);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/ {}/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/                       
}

void parameters()	 :
{/*@bgen(jjtree) parameters */
  ASTparameters jjtn000 = new ASTparameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parameters */
        try {
/*@egen*/	expression() ("," expression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// ------------------------------- CONDITIONS -----------------------------

void condition()      	 :
{}
{/*@bgen(jjtree) #or(> 1) */
        {
          ASTor jjtn001 = new ASTor(JJTOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	(and_clause() (<OR> and_clause())*)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/        
}

void and_clause()	      :
{}
{/*@bgen(jjtree) #and(> 1) */
        {
          ASTand jjtn001 = new ASTand(JJTAND);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	(not_clause() (<AND> not_clause())*)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/         
}

void not_clause()	      :
{}
{	<NOT>/*@bgen(jjtree) not */
              {
                ASTnot jjtn001 = new ASTnot(JJTNOT);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ not_clause()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
              }
/*@egen*/     
| LOOKAHEAD(term() <ISA>) isatype() 
| LOOKAHEAD(expression() comparator()) comparison()
| "(" condition() ")" 
| fn_call() 
}

void comparison()	 :
{/*@bgen(jjtree) comparison */
  ASTcomparison jjtn000 = new ASTcomparison(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) comparison */
        try {
/*@egen*/	expression() comparator() expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void comparator()	      :
{}
{/*@bgen(jjtree) LESS */
        {
          ASTLESS jjtn001 = new ASTLESS(JJTLESS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	<LESS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/            
|/*@bgen(jjtree) LESSEQ */
  {
    ASTLESSEQ jjtn002 = new ASTLESSEQ(JJTLESSEQ);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ <LESSEQ>/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/           
|/*@bgen(jjtree) GREATER */
  {
    ASTGREATER jjtn003 = new ASTGREATER(JJTGREATER);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ <GREATER>/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/           
|/*@bgen(jjtree) GREATEQ */
  {
    ASTGREATEQ jjtn004 = new ASTGREATEQ(JJTGREATEQ);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/ <GREATEQ>/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/           
|/*@bgen(jjtree) NOTCOMP */
  {
    ASTNOTCOMP jjtn005 = new ASTNOTCOMP(JJTNOTCOMP);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
  }
  try {
/*@egen*/ <NOTCOMP>/*@bgen(jjtree)*/
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
  }
/*@egen*/           
|/*@bgen(jjtree) EQUAL */
  {
    ASTEQUAL jjtn006 = new ASTEQUAL(JJTEQUAL);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
  }
  try {
/*@egen*/ <EQUAL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
  }
/*@egen*/           
|/*@bgen(jjtree) NOTEQ */
  {
    ASTNOTEQ jjtn007 = new ASTNOTEQ(JJTNOTEQ);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
  }
  try {
/*@egen*/ <NOTEQ>/*@bgen(jjtree)*/
  } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
    }
  }
/*@egen*/           
|/*@bgen(jjtree) ISIN */
  {
    ASTISIN jjtn008 = new ASTISIN(JJTISIN);
    boolean jjtc008 = true;
    jjtree.openNodeScope(jjtn008);
  }
  try {
/*@egen*/ <ISIN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc008) {
      jjtree.closeNodeScope(jjtn008, true);
    }
  }
/*@egen*/           
|/*@bgen(jjtree) NOTIN */
  {
    ASTNOTIN jjtn009 = new ASTNOTIN(JJTNOTIN);
    boolean jjtc009 = true;
    jjtree.openNodeScope(jjtn009);
  }
  try {
/*@egen*/ <NOTIN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc009) {
      jjtree.closeNodeScope(jjtn009, true);
    }
  }
/*@egen*/          
}

void isatype()		 :
{/*@bgen(jjtree) isatype */
  ASTisatype jjtn000 = new ASTisatype(JJTISATYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) isatype */
        try {
/*@egen*/	term() <ISA> type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// ------------------------------- EXPRESSIONS -----------------------------

void expression()	      :
{}
{	product() more_products()
|/*@bgen(jjtree) negate */
  {
    ASTnegate jjtn001 = new ASTnegate(JJTNEGATE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ (<MINUS> product())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         more_products()
}

void more_products()        :
{}
{/*@bgen(jjtree) #sum( 2) */
  {
    ASTsum jjtn001 = new ASTsum(JJTSUM);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ (<PLUS> product())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  2);
    }
  }
/*@egen*/         more_products()
|/*@bgen(jjtree) #difference( 2) */
  {
    ASTdifference jjtn002 = new ASTdifference(JJTDIFFERENCE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ (<MINUS> product())/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  2);
    }
  }
/*@egen*/                more_products()
|{}
}

void product()	      :
{}
{	term() more_terms()
}

void more_terms()        :
{}
{/*@bgen(jjtree) #product( 2) */
  {
    ASTproduct jjtn001 = new ASTproduct(JJTPRODUCT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ (<PROD> term())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  2);
    }
  }
/*@egen*/             more_terms()
|/*@bgen(jjtree) #quotient( 2) */
  {
    ASTquotient jjtn002 = new ASTquotient(JJTQUOTIENT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ (<DIV> term())/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  2);
    }
  }
/*@egen*/              more_terms()
|/*@bgen(jjtree) #remainder( 2) */
  {
    ASTremainder jjtn003 = new ASTremainder(JJTREMAINDER);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ (<MOD> term())/*@bgen(jjtree)*/
  } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      throw (RuntimeException)jjte003;
    }
    if (jjte003 instanceof ParseException) {
      throw (ParseException)jjte003;
    }
    throw (Error)jjte003;
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003,  2);
    }
  }
/*@egen*/               more_terms()
|{}
}

void term()	     	 :
{}
{	"(" expression() ")" 
| LOOKAHEAD(2) fn_call() 
| identifier()
| set_const()
| number()
| string() 
|/*@bgen(jjtree) NULL */
  {
    ASTNULL jjtn001 = new ASTNULL(JJTNULL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ <NULL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         
}

void set_const()      	 :
{}
{	"{" set_elements() "}"
}

void set_elements()      	 :
{}
{/*@bgen(jjtree) set */
        {
          ASTset jjtn001 = new ASTset(JJTSET);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	(expression() ("," expression())*)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/      
|/*@bgen(jjtree) set */
  {
    ASTset jjtn002 = new ASTset(JJTSET);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;
  }
/*@egen*/ {}/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/                                      
}

void identifier () :
{/*@bgen(jjtree) identifier */
 ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) identifier */
   try {
/*@egen*/  t=<IDENTIFIER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/  {jjtn000.jjtSetValue(t.getValue());}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void number () :
{/*@bgen(jjtree) number */
 ASTnumber jjtn000 = new ASTnumber(JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) number */
   try {
/*@egen*/  t=<NUMBER>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/  {jjtn000.jjtSetValue(t.getValue());}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void string () :
{/*@bgen(jjtree) string */
 ASTstring jjtn000 = new ASTstring(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) string */
   try {
/*@egen*/  t=<STRING>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/  {jjtn000.jjtSetValue(t.getValue());}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

