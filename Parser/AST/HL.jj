/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. HL.jj */
/*@egen*/// HL.jjt Copyright Sophie Quigley 2020
// This file can be only used during the Fall 2020 academic semester 
// in assignments for the course CPS710 at Ryerson University.
// Other uses and distributions are prohibited.  
// In particular this file or any others derived from it 
// may not be posted in any source code repositories.

options {
  IGNORE_CASE=true;
  DEBUG_PARSER=false;
             	                                                                        
                                                                                            
                                                                                                          
               	
}

PARSER_BEGIN(HL)

public class HL/*@bgen(jjtree)*/implements HLTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTHLState jjtree = new JJTHLState();

/*@egen*/
}

PARSER_END(HL)

// ===========================================================================
//                                 S C A N N E R   
// ===========================================================================

TOKEN_MGR_DECLS : 
{
public static int commentdepth = 0;
}

SKIP : {
  " "     
  | "\t"    
  | "\n"    
  | "\r"    
  }

TOKEN : 
{
  < AND:  "&">
|	< ASSIGN:	"=">
|	< COMMA:	",">
|	< DIV:	"/">
|	< EQUAL:	"==">
|	< GREATEQ:	">=">
|	< GREATER:	">">
| < ISIN:   "=in">
|	< LESSEQ:	"<=">
|	< LESS:	"<">
|	< LCURLY:	"{">
|	< LPAREN:	"(">
| < MOD: "%">
|	< MINUS:	"-">
| < NOTCOMP: "<>">
|	< NOTEQ:	"!=">
| < NOTIN: "!in">
|	< NOT:"!">
|	< OR:"|">
| < PLUS:	"+">
|	< PROD:	"*">
|	< RCURLY:	"}">
|	< RPAREN:	")">
|	< SEMICOL:	";">
}
TOKEN : 
{
	< DO:"DO">
|	< ELIF:"ELIF">
|	< ELSE:"ELSE">
|	< END:"END">
| < FALSE:"FALSE">
|	< FI:"FI">
|	< FOR:"FOR">
| < FROM:"FROM">
|	< FUNCTION:"FUNCTION">
|	< IF:"IF">
| < IN:"IN">
| < ISA:"ISA">
| < NULL:"NULL">
|	< NUM:"NUM">
| < OBJ:"OBJ">
|	< OD:"OD">
| < PREDICATE:"PREDICATE">
|	< PRINT:"PRINT">
|	< PRINTLN:"PRINTLN">
|	< RETURN:"RETURN">
| < SET: "SET">
| < SUB: "SUB">
|	< STR:"STR">
|	< THEN:"THEN">
| < TO:"TO">
| < TRUE:"TRUE">
|	< WHILE:"WHILE">
}

TOKEN : 
{
	< #DIGIT:	["0"-"9"]>
|	< #LETTER:	["a"-"z","A"-"Z"]>
|	< NUMBER:	(<DIGIT>)+ >
|	< IDENTIFIER:	<LETTER>(<LETTER>|<DIGIT>)* >
}

// ---------------------- PROCESSING STRING TOKEN ----------------------------

MORE:
{   <"\"" >    : INSTRING
}
<INSTRING> MORE:
{   < "\\\\" >
|   < "\\\"" >
|   < "\\t" >
|   < "\\n" >
}
<INSTRING> TOKEN:
{   <STRING: "\""> : DEFAULT
}
<INSTRING> MORE:
{
    < ["0"-"9"] >
|   < ["a"-"z","A"-"Z"] >
|   < ["`", "~", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "=", "+"] >
|   < ["[", "{", "]", "}", "|"] >
|   < [";", ":", "'"] >
|   < ["," , "<" , "." , ">" , "/" , "?", " "] >
}

// ---------------------- PROCESSING COMMENTS     ----------------------------

SPECIAL_TOKEN : {
        <COMMENT_SINGLE: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
    }

MORE:
{   < "/*" >    : INCOMMENT0
}

<INCOMMENT0> SPECIAL_TOKEN:
{
    < COMMENT_MULTI: "*/" > :   DEFAULT
}

<INCOMMENT0> MORE:
{
    < "/*" > {commentdepth++;}  : INCOMMENT1
|   < ~[] >
}

<INCOMMENT1> MORE:
{
    < "/*" > {commentdepth++;}
|   < "*/" > {commentdepth--; if (commentdepth==0) SwitchTo(INCOMMENT0); }
|   <~[]>
}

// ===========================================================================
//                                 P A R S E R   
// ===========================================================================

// ------------------------------- BEGINNING -----------------------------------

SimpleNode start	()        :
{}
{  S()  { return (SimpleNode) (jjtree.popNode()); }
| < EOF > {throw new ParseException("End of File.");}
}

void S()       :
{}
{	statement_ll() ";"
| LOOKAHEAD(2)/*@bgen(jjtree) assignment */
               {
                 ASTassignment jjtn001 = new ASTassignment(JJTASSIGNMENT);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ assignment()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
               }
/*@egen*/             ";"
|/*@bgen(jjtree) expression */
  {
    ASTexpression jjtn002 = new ASTexpression(JJTEXPRESSION);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/             ";"
}

// ------------------------------- STATEMENTS -----------------------------------
void statement() :
{/*@bgen(jjtree) statement */
  ASTstatement jjtn000 = new ASTstatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) statement */
        try {
/*@egen*//*@bgen(jjtree) statement_ll */
        {
          ASTstatement_ll jjtn001 = new ASTstatement_ll(JJTSTATEMENT_LL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	statement_ll()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/               ";"
| LOOKAHEAD(2)/*@bgen(jjtree) assignment */
               {
                 ASTassignment jjtn002 = new ASTassignment(JJTASSIGNMENT);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*/ assignment()/*@bgen(jjtree)*/
               } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   throw (RuntimeException)jjte002;
                 }
                 if (jjte002 instanceof ParseException) {
                   throw (ParseException)jjte002;
                 }
                 throw (Error)jjte002;
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002, true);
                 }
               }
/*@egen*/             ";"
|/*@bgen(jjtree) fn_call */
  {
    ASTfn_call jjtn003 = new ASTfn_call(JJTFN_CALL);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ fn_call()/*@bgen(jjtree)*/
  } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      throw (RuntimeException)jjte003;
    }
    if (jjte003 instanceof ParseException) {
      throw (ParseException)jjte003;
    }
    throw (Error)jjte003;
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/          ";"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void statement_ll()      	 :
{}
{/*@bgen(jjtree) declaration */
        {
          ASTdeclaration jjtn001 = new ASTdeclaration(JJTDECLARATION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	declaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/             
| if_stat() 
| for_stat() 
| while_stat()	
| print_stat() 
| println_stat()
| return_stat()
}

void body() :
{/*@bgen(jjtree) body */
  ASTbody jjtn000 = new ASTbody(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) body */
        try {
/*@egen*/	(statement())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void clause()		 :
{/*@bgen(jjtree) clause */
  ASTclause jjtn000 = new ASTclause(JJTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) clause */
        try {
/*@egen*/	(statement())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// ------------------------------- DECLARATIONS ------------------------------

void declaration()	      :
{}
{	LOOKAHEAD(2) simple_decl()
| fn_decl() 
| sub_decl() 
| predicate_decl()
}

void simple_decl()	 :
{/*@bgen(jjtree) simple_decl */
  ASTsimple_decl jjtn000 = new ASTsimple_decl(JJTSIMPLE_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) simple_decl */
        try {
/*@egen*/	type() ident_list()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void fn_decl()		 :
{/*@bgen(jjtree) fn_decl */
  ASTfn_decl jjtn000 = new ASTfn_decl(JJTFN_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fn_decl */
        try {
/*@egen*/	type() <FUNCTION> Identifier() "(" param_decls() ")" body() <END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void sub_decl()	 :
{/*@bgen(jjtree) sub_decl */
  ASTsub_decl jjtn000 = new ASTsub_decl(JJTSUB_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) sub_decl */
        try {
/*@egen*/	<SUB> Identifier() "(" param_decls() ")" body() <END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void predicate_decl()	 :
{/*@bgen(jjtree) predicate_decl */
  ASTpredicate_decl jjtn000 = new ASTpredicate_decl(JJTPREDICATE_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) predicate_decl */
        try {
/*@egen*/	<PREDICATE>  Identifier()  "(" param_decls() ")" body() <END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void type()		 :
{/*@bgen(jjtree) type */
  ASTtype jjtn000 = new ASTtype(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) type */
        try {
/*@egen*/	NumType()
| StrType()
| SetType()
| ObjType()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ident_list()	 :
{/*@bgen(jjtree) ident_list */
  ASTident_list jjtn000 = new ASTident_list(JJTIDENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ident_list */
        try {
/*@egen*/	(Identifier()  "," Identifier() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void param_decls()	 :
{/*@bgen(jjtree) param_decls */
  ASTparam_decls jjtn000 = new ASTparam_decls(JJTPARAM_DECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) param_decls */
        try {
/*@egen*/	param_decl() ("," param_decl())*
|/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ {}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void param_decl()	 :
{/*@bgen(jjtree) param_decl */
  ASTparam_decl jjtn000 = new ASTparam_decl(JJTPARAM_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) param_decl */
        try {
/*@egen*/	type() Identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// ------------------------------- ASSIGNMENT, IF, LOOPS ------------------------------

void assignment() :
{/*@bgen(jjtree) assignment */
  ASTassignment jjtn000 = new ASTassignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) assignment */
      try {
/*@egen*/     Identifier() <ASSIGN> expression()/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void if_stat()		 :
{/*@bgen(jjtree) if_stat */
  ASTif_stat jjtn000 = new ASTif_stat(JJTIF_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) if_stat */
        try {
/*@egen*/	<IF> condition() <THEN> clause() elifs() else_clause() <FI>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void elifs()       :
{}
{	(<ELIF> condition() <THEN> clause())*
}

void else_clause()        :
{}
{	<ELSE> clause()
| {}
}

void for_stat()	       :
{}
{	LOOKAHEAD(3) for_explicit() 
| for_implicit()
}

void for_explicit()	 :
{/*@bgen(jjtree) for_explicit */
  ASTfor_explicit jjtn000 = new ASTfor_explicit(JJTFOR_EXPLICIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) for_explicit */
        try {
/*@egen*/	<FOR> Identifier() <FROM> expression() <TO> expression() <DO> body() <OD>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void for_implicit()	 :
{/*@bgen(jjtree) for_implicit */
  ASTfor_implicit jjtn000 = new ASTfor_implicit(JJTFOR_IMPLICIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) for_implicit */
        try {
/*@egen*/	<FOR> Identifier() <IN> expression() <DO> body() <OD>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void while_stat()	 :
{/*@bgen(jjtree) while_stat */
  ASTwhile_stat jjtn000 = new ASTwhile_stat(JJTWHILE_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) while_stat */
        try {
/*@egen*/	<WHILE> condition() <DO> body() <OD>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// ------------------------------- FN CALLS, RETURN, PRINT -----------------------------

void fn_call()		 :
{/*@bgen(jjtree) fn_call */
  ASTfn_call jjtn000 = new ASTfn_call(JJTFN_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fn_call */
        try {
/*@egen*/	Identifier() "(" optional_parameters() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void return_stat()	:
{/*@bgen(jjtree) return_stat */
  ASTreturn_stat jjtn000 = new ASTreturn_stat(JJTRETURN_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) return_stat */
        try {
/*@egen*/	<RETURN> optional_return_value()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void optional_return_value()       :
{}
{ True()
| False()
| expression()
| {}
}

void print_stat() :
{/*@bgen(jjtree) print_stat */
  ASTprint_stat jjtn000 = new ASTprint_stat(JJTPRINT_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) print_stat */
  try {
/*@egen*/ <PRINT> parameters()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void println_stat() :
{/*@bgen(jjtree) println_stat */
  ASTprintln_stat jjtn000 = new ASTprintln_stat(JJTPRINTLN_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) println_stat */
  try {
/*@egen*/ <PRINTLN> optional_parameters()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void optional_parameters()       :
{}
{ parameters()
| {}
}

void parameters()	 :
{/*@bgen(jjtree) parameters */
  ASTparameters jjtn000 = new ASTparameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parameters */
        try {
/*@egen*/	expression() ("," expression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// ------------------------------- CONDITIONS -----------------------------

void condition()       :
{}
{	and_clause() (<OR> and_clause())*
}

void and_clause()       :
{}
{	not_clause() (<AND> not_clause())*
}

void not_clause()       :
{}
{	<NOT> not_clause() 
| LOOKAHEAD(term() <ISA>) isatype() 
| LOOKAHEAD(expression() comparator()) comparison()
| "(" condition() ")" 
| fn_call() 
}

void comparison()       :
{}
{	expression() comparator() expression()
}

void comparator()       :
{}
{	Less()
| LessEq()
| Greater()
| GreateEq()
| NotComp()
| Equal()
| NotEq()
| IsIn()
| IsNotIn()
}

void isatype()		 :
{/*@bgen(jjtree) isatype */
  ASTisatype jjtn000 = new ASTisatype(JJTISATYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) isatype */
        try {
/*@egen*/	term() <ISA> type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// ------------------------------- EXPRESSIONS -----------------------------

void expression()       :
{}
{	product() more_expressions()
}

void more_expressions()        :
{}
{/*@bgen(jjtree) sumation */
   {
     ASTsumation jjtn001 = new ASTsumation(JJTSUMATION);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/  (<PLUS> expression() more_expressions())/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/          
|/*@bgen(jjtree) subtraction */
   {
     ASTsubtraction jjtn002 = new ASTsubtraction(JJTSUBTRACTION);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
   }
   try {
/*@egen*/  (<MINUS> expression() more_expressions())/*@bgen(jjtree)*/
   } catch (Throwable jjte002) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte002 instanceof RuntimeException) {
       throw (RuntimeException)jjte002;
     }
     if (jjte002 instanceof ParseException) {
       throw (ParseException)jjte002;
     }
     throw (Error)jjte002;
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
   }
/*@egen*/             
|{}
}

void product()	     	 :
{}
{	term() more_products()
}

void more_products()        :
{}
{/*@bgen(jjtree) product */
  {
    ASTproduct jjtn001 = new ASTproduct(JJTPRODUCT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ (<PROD> product() more_products())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         
|/*@bgen(jjtree) division */
  {
    ASTdivision jjtn002 = new ASTdivision(JJTDIVISION);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ (<DIV> product() more_products())/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/          
|/*@bgen(jjtree) modulo */
  {
    ASTmodulo jjtn003 = new ASTmodulo(JJTMODULO);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ (<MOD> product() more_products())/*@bgen(jjtree)*/
  } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      throw (RuntimeException)jjte003;
    }
    if (jjte003 instanceof ParseException) {
      throw (ParseException)jjte003;
    }
    throw (Error)jjte003;
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/        
|{}
}

void term()	     	 :
{}
{	"(" expression() ")"
| LOOKAHEAD(2) fn_call() 
| Identifier() 
|/*@bgen(jjtree) set */
  {
    ASTset jjtn001 = new ASTset(JJTSET);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ set_const()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/     
| Number()
| String()
| <NULL>
}

void set_const()       :
{}
{	"{" set_elements() "}"
}

void set_elements()	      :
{}
{	expression() ("," expression())*
| {}
}

 // ------ Assignment -------

void Identifier():
{/*@bgen(jjtree) Identifier */
 ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.jjtSetValue(t.getValue());}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Number():
{/*@bgen(jjtree) Number */
 ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Number */
    try {
/*@egen*/
    t = <NUMBER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.jjtSetValue(t.getValue());}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void String():
{/*@bgen(jjtree) String */
 ASTString jjtn000 = new ASTString(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) String */
    try {
/*@egen*/
    t = <STRING>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.jjtSetValue(t.getValue());}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

 // --- Types ---

void True():
{/*@bgen(jjtree) True */
 ASTTrue jjtn000 = new ASTTrue(JJTTRUE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) True */
    try {
/*@egen*/
    t = <TRUE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void False():
{/*@bgen(jjtree) False */
 ASTFalse jjtn000 = new ASTFalse(JJTFALSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) False */
    try {
/*@egen*/
    t = <FALSE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NumType():
{/*@bgen(jjtree) NumType */
 ASTNumType jjtn000 = new ASTNumType(JJTNUMTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NumType */
     try {
/*@egen*/
     t = <NUM>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.jjtSetValue("Num_Type");}/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void StrType():
{/*@bgen(jjtree) StrType */
 ASTStrType jjtn000 = new ASTStrType(JJTSTRTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) StrType */
    try {
/*@egen*/
    t = <STR>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.jjtSetValue("Str_Type");}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void SetType():
{/*@bgen(jjtree) SetType */
 ASTSetType jjtn000 = new ASTSetType(JJTSETTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) SetType */
    try {
/*@egen*/
    t = <SET>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.jjtSetValue("Set_Type");}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ObjType():
{/*@bgen(jjtree) ObjType */
 ASTObjType jjtn000 = new ASTObjType(JJTOBJTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ObjType */
    try {
/*@egen*/
    t = <OBJ>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.jjtSetValue("Obj_Type");}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

 // --- Comparators ---

void Less():
{/*@bgen(jjtree) Less */
 ASTLess jjtn000 = new ASTLess(JJTLESS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Less */
    try {
/*@egen*/
    t = <LESS>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.jjtSetValue("Less");}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void LessEq():
{/*@bgen(jjtree) LessEq */
 ASTLessEq jjtn000 = new ASTLessEq(JJTLESSEQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) LessEq */
    try {
/*@egen*/
    t = <LESSEQ>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.jjtSetValue("LessEq");}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Greater():
{/*@bgen(jjtree) Greater */
 ASTGreater jjtn000 = new ASTGreater(JJTGREATER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Greater */
    try {
/*@egen*/
    t = <GREATER>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.jjtSetValue("Grtr");}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void GreateEq():
{/*@bgen(jjtree) GreateEq */
 ASTGreateEq jjtn000 = new ASTGreateEq(JJTGREATEEQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) GreateEq */
    try {
/*@egen*/
    t = <GREATEQ>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.jjtSetValue("GrtrEq");}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NotComp():
{/*@bgen(jjtree) NotComp */
 ASTNotComp jjtn000 = new ASTNotComp(JJTNOTCOMP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) NotComp */
    try {
/*@egen*/
    t = <NOTCOMP>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.jjtSetValue("Not");}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NotEq():
{/*@bgen(jjtree) NotEq */
 ASTNotEq jjtn000 = new ASTNotEq(JJTNOTEQ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) NotEq */
    try {
/*@egen*/
    t = <NOTEQ>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.jjtSetValue("NotEq");}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Equal():
{/*@bgen(jjtree) Equal */
 ASTEqual jjtn000 = new ASTEqual(JJTEQUAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Equal */
    try {
/*@egen*/
    t = <EQUAL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.jjtSetValue("Eq");}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IsIn():
{/*@bgen(jjtree) IsIn */
 ASTIsIn jjtn000 = new ASTIsIn(JJTISIN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) IsIn */
    try {
/*@egen*/
    t = <ISIN>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.jjtSetValue("IsIn");}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IsNotIn():
{/*@bgen(jjtree) IsNotIn */
 ASTIsNotIn jjtn000 = new ASTIsNotIn(JJTISNOTIN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) IsNotIn */
    try {
/*@egen*/
    t = <NOTIN>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {jjtn000.jjtSetValue("IsNotIn");}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

 // --- Operators ---

void PlusOp():
{/*@bgen(jjtree) PlusOp */
 ASTPlusOp jjtn000 = new ASTPlusOp(JJTPLUSOP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) PlusOp */
    try {
/*@egen*/
    t = <PLUS>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.jjtSetValue(""); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}